// Code generated by counterfeiter. DO NOT EDIT.
package workerfakes

import (
	sync "sync"

	garden "code.cloudfoundry.org/garden"
	lager "code.cloudfoundry.org/lager"
	db "github.com/concourse/concourse/atc/db"
	worker "github.com/concourse/concourse/atc/worker"
)

type FakeContainerProvider struct {
	ConstructGardenWorkerContainerStub        func(lager.Logger, db.CreatedContainer, garden.Container) (worker.Container, error)
	constructGardenWorkerContainerMutex       sync.RWMutex
	constructGardenWorkerContainerArgsForCall []struct {
		arg1 lager.Logger
		arg2 db.CreatedContainer
		arg3 garden.Container
	}
	constructGardenWorkerContainerReturns struct {
		result1 worker.Container
		result2 error
	}
	constructGardenWorkerContainerReturnsOnCall map[int]struct {
		result1 worker.Container
		result2 error
	}
	CreateGardenContainerStub        func(worker.ContainerSpec, worker.FetchedImage, db.CreatingContainer, []garden.BindMount) (garden.Container, error)
	createGardenContainerMutex       sync.RWMutex
	createGardenContainerArgsForCall []struct {
		arg1 worker.ContainerSpec
		arg2 worker.FetchedImage
		arg3 db.CreatingContainer
		arg4 []garden.BindMount
	}
	createGardenContainerReturns struct {
		result1 garden.Container
		result2 error
	}
	createGardenContainerReturnsOnCall map[int]struct {
		result1 garden.Container
		result2 error
	}
	FindCreatedContainerByHandleStub        func(lager.Logger, string, int) (worker.Container, bool, error)
	findCreatedContainerByHandleMutex       sync.RWMutex
	findCreatedContainerByHandleArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
		arg3 int
	}
	findCreatedContainerByHandleReturns struct {
		result1 worker.Container
		result2 bool
		result3 error
	}
	findCreatedContainerByHandleReturnsOnCall map[int]struct {
		result1 worker.Container
		result2 bool
		result3 error
	}
	FindOrInitializeContainerStub        func(lager.Logger, db.ContainerOwner, db.ContainerMetadata) (db.CreatingContainer, db.CreatedContainer, error)
	findOrInitializeContainerMutex       sync.RWMutex
	findOrInitializeContainerArgsForCall []struct {
		arg1 lager.Logger
		arg2 db.ContainerOwner
		arg3 db.ContainerMetadata
	}
	findOrInitializeContainerReturns struct {
		result1 db.CreatingContainer
		result2 db.CreatedContainer
		result3 error
	}
	findOrInitializeContainerReturnsOnCall map[int]struct {
		result1 db.CreatingContainer
		result2 db.CreatedContainer
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerProvider) ConstructGardenWorkerContainer(arg1 lager.Logger, arg2 db.CreatedContainer, arg3 garden.Container) (worker.Container, error) {
	fake.constructGardenWorkerContainerMutex.Lock()
	ret, specificReturn := fake.constructGardenWorkerContainerReturnsOnCall[len(fake.constructGardenWorkerContainerArgsForCall)]
	fake.constructGardenWorkerContainerArgsForCall = append(fake.constructGardenWorkerContainerArgsForCall, struct {
		arg1 lager.Logger
		arg2 db.CreatedContainer
		arg3 garden.Container
	}{arg1, arg2, arg3})
	fake.recordInvocation("ConstructGardenWorkerContainer", []interface{}{arg1, arg2, arg3})
	fake.constructGardenWorkerContainerMutex.Unlock()
	if fake.ConstructGardenWorkerContainerStub != nil {
		return fake.ConstructGardenWorkerContainerStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.constructGardenWorkerContainerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeContainerProvider) ConstructGardenWorkerContainerCallCount() int {
	fake.constructGardenWorkerContainerMutex.RLock()
	defer fake.constructGardenWorkerContainerMutex.RUnlock()
	return len(fake.constructGardenWorkerContainerArgsForCall)
}

func (fake *FakeContainerProvider) ConstructGardenWorkerContainerCalls(stub func(lager.Logger, db.CreatedContainer, garden.Container) (worker.Container, error)) {
	fake.constructGardenWorkerContainerMutex.Lock()
	defer fake.constructGardenWorkerContainerMutex.Unlock()
	fake.ConstructGardenWorkerContainerStub = stub
}

func (fake *FakeContainerProvider) ConstructGardenWorkerContainerArgsForCall(i int) (lager.Logger, db.CreatedContainer, garden.Container) {
	fake.constructGardenWorkerContainerMutex.RLock()
	defer fake.constructGardenWorkerContainerMutex.RUnlock()
	argsForCall := fake.constructGardenWorkerContainerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeContainerProvider) ConstructGardenWorkerContainerReturns(result1 worker.Container, result2 error) {
	fake.constructGardenWorkerContainerMutex.Lock()
	defer fake.constructGardenWorkerContainerMutex.Unlock()
	fake.ConstructGardenWorkerContainerStub = nil
	fake.constructGardenWorkerContainerReturns = struct {
		result1 worker.Container
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerProvider) ConstructGardenWorkerContainerReturnsOnCall(i int, result1 worker.Container, result2 error) {
	fake.constructGardenWorkerContainerMutex.Lock()
	defer fake.constructGardenWorkerContainerMutex.Unlock()
	fake.ConstructGardenWorkerContainerStub = nil
	if fake.constructGardenWorkerContainerReturnsOnCall == nil {
		fake.constructGardenWorkerContainerReturnsOnCall = make(map[int]struct {
			result1 worker.Container
			result2 error
		})
	}
	fake.constructGardenWorkerContainerReturnsOnCall[i] = struct {
		result1 worker.Container
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerProvider) CreateGardenContainer(arg1 worker.ContainerSpec, arg2 worker.FetchedImage, arg3 db.CreatingContainer, arg4 []garden.BindMount) (garden.Container, error) {
	var arg4Copy []garden.BindMount
	if arg4 != nil {
		arg4Copy = make([]garden.BindMount, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.createGardenContainerMutex.Lock()
	ret, specificReturn := fake.createGardenContainerReturnsOnCall[len(fake.createGardenContainerArgsForCall)]
	fake.createGardenContainerArgsForCall = append(fake.createGardenContainerArgsForCall, struct {
		arg1 worker.ContainerSpec
		arg2 worker.FetchedImage
		arg3 db.CreatingContainer
		arg4 []garden.BindMount
	}{arg1, arg2, arg3, arg4Copy})
	fake.recordInvocation("CreateGardenContainer", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.createGardenContainerMutex.Unlock()
	if fake.CreateGardenContainerStub != nil {
		return fake.CreateGardenContainerStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createGardenContainerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeContainerProvider) CreateGardenContainerCallCount() int {
	fake.createGardenContainerMutex.RLock()
	defer fake.createGardenContainerMutex.RUnlock()
	return len(fake.createGardenContainerArgsForCall)
}

func (fake *FakeContainerProvider) CreateGardenContainerCalls(stub func(worker.ContainerSpec, worker.FetchedImage, db.CreatingContainer, []garden.BindMount) (garden.Container, error)) {
	fake.createGardenContainerMutex.Lock()
	defer fake.createGardenContainerMutex.Unlock()
	fake.CreateGardenContainerStub = stub
}

func (fake *FakeContainerProvider) CreateGardenContainerArgsForCall(i int) (worker.ContainerSpec, worker.FetchedImage, db.CreatingContainer, []garden.BindMount) {
	fake.createGardenContainerMutex.RLock()
	defer fake.createGardenContainerMutex.RUnlock()
	argsForCall := fake.createGardenContainerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeContainerProvider) CreateGardenContainerReturns(result1 garden.Container, result2 error) {
	fake.createGardenContainerMutex.Lock()
	defer fake.createGardenContainerMutex.Unlock()
	fake.CreateGardenContainerStub = nil
	fake.createGardenContainerReturns = struct {
		result1 garden.Container
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerProvider) CreateGardenContainerReturnsOnCall(i int, result1 garden.Container, result2 error) {
	fake.createGardenContainerMutex.Lock()
	defer fake.createGardenContainerMutex.Unlock()
	fake.CreateGardenContainerStub = nil
	if fake.createGardenContainerReturnsOnCall == nil {
		fake.createGardenContainerReturnsOnCall = make(map[int]struct {
			result1 garden.Container
			result2 error
		})
	}
	fake.createGardenContainerReturnsOnCall[i] = struct {
		result1 garden.Container
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerProvider) FindCreatedContainerByHandle(arg1 lager.Logger, arg2 string, arg3 int) (worker.Container, bool, error) {
	fake.findCreatedContainerByHandleMutex.Lock()
	ret, specificReturn := fake.findCreatedContainerByHandleReturnsOnCall[len(fake.findCreatedContainerByHandleArgsForCall)]
	fake.findCreatedContainerByHandleArgsForCall = append(fake.findCreatedContainerByHandleArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	fake.recordInvocation("FindCreatedContainerByHandle", []interface{}{arg1, arg2, arg3})
	fake.findCreatedContainerByHandleMutex.Unlock()
	if fake.FindCreatedContainerByHandleStub != nil {
		return fake.FindCreatedContainerByHandleStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.findCreatedContainerByHandleReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeContainerProvider) FindCreatedContainerByHandleCallCount() int {
	fake.findCreatedContainerByHandleMutex.RLock()
	defer fake.findCreatedContainerByHandleMutex.RUnlock()
	return len(fake.findCreatedContainerByHandleArgsForCall)
}

func (fake *FakeContainerProvider) FindCreatedContainerByHandleCalls(stub func(lager.Logger, string, int) (worker.Container, bool, error)) {
	fake.findCreatedContainerByHandleMutex.Lock()
	defer fake.findCreatedContainerByHandleMutex.Unlock()
	fake.FindCreatedContainerByHandleStub = stub
}

func (fake *FakeContainerProvider) FindCreatedContainerByHandleArgsForCall(i int) (lager.Logger, string, int) {
	fake.findCreatedContainerByHandleMutex.RLock()
	defer fake.findCreatedContainerByHandleMutex.RUnlock()
	argsForCall := fake.findCreatedContainerByHandleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeContainerProvider) FindCreatedContainerByHandleReturns(result1 worker.Container, result2 bool, result3 error) {
	fake.findCreatedContainerByHandleMutex.Lock()
	defer fake.findCreatedContainerByHandleMutex.Unlock()
	fake.FindCreatedContainerByHandleStub = nil
	fake.findCreatedContainerByHandleReturns = struct {
		result1 worker.Container
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeContainerProvider) FindCreatedContainerByHandleReturnsOnCall(i int, result1 worker.Container, result2 bool, result3 error) {
	fake.findCreatedContainerByHandleMutex.Lock()
	defer fake.findCreatedContainerByHandleMutex.Unlock()
	fake.FindCreatedContainerByHandleStub = nil
	if fake.findCreatedContainerByHandleReturnsOnCall == nil {
		fake.findCreatedContainerByHandleReturnsOnCall = make(map[int]struct {
			result1 worker.Container
			result2 bool
			result3 error
		})
	}
	fake.findCreatedContainerByHandleReturnsOnCall[i] = struct {
		result1 worker.Container
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeContainerProvider) FindOrInitializeContainer(arg1 lager.Logger, arg2 db.ContainerOwner, arg3 db.ContainerMetadata) (db.CreatingContainer, db.CreatedContainer, error) {
	fake.findOrInitializeContainerMutex.Lock()
	ret, specificReturn := fake.findOrInitializeContainerReturnsOnCall[len(fake.findOrInitializeContainerArgsForCall)]
	fake.findOrInitializeContainerArgsForCall = append(fake.findOrInitializeContainerArgsForCall, struct {
		arg1 lager.Logger
		arg2 db.ContainerOwner
		arg3 db.ContainerMetadata
	}{arg1, arg2, arg3})
	fake.recordInvocation("FindOrInitializeContainer", []interface{}{arg1, arg2, arg3})
	fake.findOrInitializeContainerMutex.Unlock()
	if fake.FindOrInitializeContainerStub != nil {
		return fake.FindOrInitializeContainerStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.findOrInitializeContainerReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeContainerProvider) FindOrInitializeContainerCallCount() int {
	fake.findOrInitializeContainerMutex.RLock()
	defer fake.findOrInitializeContainerMutex.RUnlock()
	return len(fake.findOrInitializeContainerArgsForCall)
}

func (fake *FakeContainerProvider) FindOrInitializeContainerCalls(stub func(lager.Logger, db.ContainerOwner, db.ContainerMetadata) (db.CreatingContainer, db.CreatedContainer, error)) {
	fake.findOrInitializeContainerMutex.Lock()
	defer fake.findOrInitializeContainerMutex.Unlock()
	fake.FindOrInitializeContainerStub = stub
}

func (fake *FakeContainerProvider) FindOrInitializeContainerArgsForCall(i int) (lager.Logger, db.ContainerOwner, db.ContainerMetadata) {
	fake.findOrInitializeContainerMutex.RLock()
	defer fake.findOrInitializeContainerMutex.RUnlock()
	argsForCall := fake.findOrInitializeContainerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeContainerProvider) FindOrInitializeContainerReturns(result1 db.CreatingContainer, result2 db.CreatedContainer, result3 error) {
	fake.findOrInitializeContainerMutex.Lock()
	defer fake.findOrInitializeContainerMutex.Unlock()
	fake.FindOrInitializeContainerStub = nil
	fake.findOrInitializeContainerReturns = struct {
		result1 db.CreatingContainer
		result2 db.CreatedContainer
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeContainerProvider) FindOrInitializeContainerReturnsOnCall(i int, result1 db.CreatingContainer, result2 db.CreatedContainer, result3 error) {
	fake.findOrInitializeContainerMutex.Lock()
	defer fake.findOrInitializeContainerMutex.Unlock()
	fake.FindOrInitializeContainerStub = nil
	if fake.findOrInitializeContainerReturnsOnCall == nil {
		fake.findOrInitializeContainerReturnsOnCall = make(map[int]struct {
			result1 db.CreatingContainer
			result2 db.CreatedContainer
			result3 error
		})
	}
	fake.findOrInitializeContainerReturnsOnCall[i] = struct {
		result1 db.CreatingContainer
		result2 db.CreatedContainer
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeContainerProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.constructGardenWorkerContainerMutex.RLock()
	defer fake.constructGardenWorkerContainerMutex.RUnlock()
	fake.createGardenContainerMutex.RLock()
	defer fake.createGardenContainerMutex.RUnlock()
	fake.findCreatedContainerByHandleMutex.RLock()
	defer fake.findCreatedContainerByHandleMutex.RUnlock()
	fake.findOrInitializeContainerMutex.RLock()
	defer fake.findOrInitializeContainerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeContainerProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.ContainerProvider = new(FakeContainerProvider)
